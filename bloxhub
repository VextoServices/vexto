-- LocalScript in a ScreenGui under StarterGui
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

-- Create ScreenGui for Key System
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "VextoKeySystem"
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = true

-- Create main frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 400)
frame.Position = UDim2.new(0.5, -150, 0.5, -200)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Parent = screenGui

-- Add corner rounding
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 10)
uiCorner.Parent = frame

-- Title
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 50)
title.Position = UDim2.new(0, 0, 0, 10)
title.BackgroundTransparency = 1
title.Text = "Vexto Key System"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextSize = 24
title.Font = Enum.Font.SourceSansBold
title.TextXAlignment = Enum.TextXAlignment.Center
title.Parent = frame

-- Key input field
local keyInput = Instance.new("TextBox")
keyInput.Size = UDim2.new(0.9, 0, 0, 40)
keyInput.Position = UDim2.new(0.05, 0, 0, 70)
keyInput.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
keyInput.TextColor3 = Color3.fromRGB(255, 255, 255)
keyInput.PlaceholderText = "Enter your key"
keyInput.TextSize = 18
keyInput.Font = Enum.Font.SourceSans
keyInput.Parent = frame

-- Check Key button
local checkButton = Instance.new("TextButton")
checkButton.Size = UDim2.new(0.9, 0, 0, 40)
checkButton.Position = UDim2.new(0.05, 0, 0, 120)
checkButton.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
checkButton.TextColor3 = Color3.fromRGB(255, 255, 255)
checkButton.Text = "Check Key"
checkButton.TextSize = 18
checkButton.Font = Enum.Font.SourceSansBold
checkButton.Parent = frame

-- Get Key button
local getKeyButton = Instance.new("TextButton")
getKeyButton.Size = UDim2.new(0.9, 0, 0, 40)
getKeyButton.Position = UDim2.new(0.05, 0, 0, 170)
getKeyButton.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
getKeyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
getKeyButton.Text = "Get Key"
getKeyButton.TextSize = 18
getKeyButton.Font = Enum.Font.SourceSansBold
getKeyButton.Parent = frame

-- Countdown timer label
local timerLabel = Instance.new("TextLabel")
timerLabel.Size = UDim2.new(0.9, 0, 0, 30)
timerLabel.Position = UDim2.new(0.05, 0, 0, 220)
timerLabel.BackgroundTransparency = 1
timerLabel.Text = "Time left: 3:00:00"
timerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
timerLabel.TextSize = 16
timerLabel.Font = Enum.Font.SourceSans
timerLabel.TextXAlignment = Enum.TextXAlignment.Center
timerLabel.Parent = frame

-- Instructions label
local instructions = Instance.new("TextLabel")
instructions.Size = UDim2.new(0.9, 0, 0, 100)
instructions.Position = UDim2.new(0.05, 0, 0, 260)
instructions.BackgroundTransparency = 1
instructions.Text = "Press Get Key and paste it in your browser and do the steps to get key."
instructions.TextColor3 = Color3.fromRGB(200, 200, 200)
instructions.TextSize = 14
instructions.Font = Enum.Font.SourceSans
instructions.TextWrapped = true
instructions.TextXAlignment = Enum.TextXAlignment.Center
instructions.Parent = frame

-- Key system logic
local validKey = "VextoBoosts123cool"
local keyLink = "https://workink.net/220Z/9ubhocyq"
local keyExpiration = 3 * 3600 -- 3 hours in seconds
local currentKey = nil
local keyStartTime = nil
local isMainScriptRunning = false

-- Function to format time
local function formatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = seconds % 60
    return string.format("%d:%02d:%02d", hours, minutes, secs)
end

-- Update timer
local function updateTimer()
    if keyStartTime then
        local elapsed = os.time() - keyStartTime
        local timeLeft = keyExpiration - elapsed
        if timeLeft <= 0 then
            currentKey = nil
            keyStartTime = nil
            timerLabel.Text = "Key expired"
            isMainScriptRunning = false
            screenGui.Enabled = true -- Re-enable GUI when key expires
        else
            timerLabel.Text = "Time left: " .. formatTime(timeLeft)
        end
    end
end

-- Function to run the main script
local function runMainScript()
    if isMainScriptRunning then return end
    isMainScriptRunning = true
    screenGui.Enabled = false -- Hide GUI after successful key entry

    -- Main script begins here
    local function Notify(title, message, duration)
        pcall(function()
            if game.StarterGui then
                game.StarterGui:SetCore("SendNotification", {
                    Title = title,
                    Text = message,
                    Duration = duration or 5
                })
            end
        end)
    end

    local Library, Flags
    local success, result = pcall(loadstring, game:HttpGet('https://raw.githubusercontent.com/Rain-Design/Libraries/main/Shaman/Library.lua'))
    if not success or not result then
        Notify("Error", "Failed to load Shaman library: " .. tostring(result) .. ". Check your executor or internet connection.", 10)
        return
    else
        Library = result()
        Flags = Library.Flags
        Notify("Vexto Premium", "Library loaded successfully!", 3)
    end

    local Window
    local success, err = pcall(function()
        Window = Library:Window({
            Text = "Vexto Premium | TB3"
        })
    end)
    if not success then
        Notify("Error", "Failed to initialize UI: " .. tostring(err) .. ". Try a different executor.", 10)
        return
    end

    local MainTab = Window:Tab({ Text = "Main" })
    local GunModsTab = Window:Tab({ Text = "Gun Mods" })
    local VisualsTab = Window:Tab({ Text = "Visuals" })
    local BypassesTab = Window:Tab({ Text = "Bypasses" })
    local BankTab = Window:Tab({ Text = "Bank" })
    local OthersTab = Window:Tab({ Text = "Others" })

    local PlayerFeaturesSection = MainTab:Section({ Text = "Player Features" })
    local BronxSection = MainTab:Section({ Text = "Bronx 🏙️" })
    local GunModSection = GunModsTab:Section({ Text = "Gun Modifications 🔫" })
    local VisualsSection = VisualsTab:Section({ Text = "Visuals" })
    local BypassSection = BypassesTab:Section({ Text = "Bypasses" })
    local BankSection = BankTab:Section({ Text = "Bank / ATM" })
    local SpectateSection = OthersTab:Section({ Text = "Spectate" })

    local SpeedBoostValue = 8
    local Track = nil
    local Animation = nil
    local WalkSpeedChangerEnabled = false

    PlayerFeaturesSection:Slider({
        Text = "Walkspeed",
        Default = 8,
        Minimum = 1,
        Maximum = 38,
        Rounding = 1,
        Callback = function(Value)
            SpeedBoostValue = Value
        end
    })

    PlayerFeaturesSection:Toggle({
        Text = "Walkspeed Enabled",
        Default = false,
        Tooltip = "Enable to adjust walkspeed with animation",
        Callback = function(Value)
            WalkSpeedChangerEnabled = Value
            local player = Players.LocalPlayer
            if WalkSpeedChangerEnabled then
                if not player.Character or not player.Character:FindFirstChild("Humanoid") then
                    Notify("Walkspeed", "Character or Humanoid not found", 3)
                    return
                end
                local success, err = pcall(function()
                    Animation = Instance.new("Animation", player.PlayerGui)
                    Animation.AnimationId = "rbxassetid://78828590676720"
                    local Humanoid = player.Character:FindFirstChild("Humanoid")
                    Track = Humanoid.Animator:LoadAnimation(Animation)
                    Track:Play()
                end)
                if not success then
                    Notify("Walkspeed", "Failed to initialize animation: " .. tostring(err), 3)
                    return
                end
                
                while WalkSpeedChangerEnabled and player.Character and player.Character:FindFirstChild("Humanoid") do
                    task.wait()
                    pcall(function()
                        local Humanoid = player.Character.Humanoid
                        Humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                        if not Track.IsPlaying then
                            Track:Stop()
                            Track:Play()
                        end
                        Humanoid.WalkSpeed = SpeedBoostValue
                    end)
                end
            else
                if player.Character and player.Character:FindFirstChild("Humanoid") then
                    pcall(function()
                        player.Character.Humanoid.WalkSpeed = 8
                    end)
                end
                task.wait(0.2)
                if Track then
                    pcall(function() Track:Stop() end)
                    Track = nil
                end
                if Animation then
                    pcall(function() Animation:Destroy() end)
                    Animation = nil
                end
            end
        end
    })

    PlayerFeaturesSection:Toggle({
        Text = "Noclip",
        Default = false,
        Tooltip = "Enables noclip to pass through objects",
        Callback = function(Value)
            local player = Players.LocalPlayer
            local Character = player.Character
            if Character then
                pcall(function()
                    for _, part in pairs(Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = not Value
                        end
                    end
                end)
            else
                Notify("Noclip", "Character not found", 3)
            end
            if Value then
                local connection
                connection = RunService.Stepped:Connect(function()
                    if not Flags.Noclip then
                        connection:Disconnect()
                        return
                    end
                    if player.Character then
                        pcall(function()
                            for _, part in pairs(player.Character:GetDescendants()) do
                                if part:IsA("BasePart") then
                                    part.CanCollide = false
                                end
                            end
                        end)
                    end
                end)
            end
        end,
        Flag = "Noclip"
    })

    local function ApplyInfiniteAmmo(tool, enable)
        if not tool then return false end
        local success, settings = pcall(function()
            return require(tool:FindFirstChild("Setting"))
        end)
        if not success or not settings then
            return false
        end
        pcall(function()
            if enable then
                settings.LimitedAmmoEnabled = false
                settings.MaxAmmo = 9e9
                settings.AmmoPerMag = 9e9
                settings.Ammo = 9e9
            else
                settings.LimitedAmmoEnabled = true
                settings.MaxAmmo = settings.DefaultMaxAmmo or 30
                settings.AmmoPerMag = settings.DefaultAmmoPerMag or 10
                settings.Ammo = settings.DefaultAmmo or 10
            end
        end)
        return true
    end

    GunModSection:Toggle({
        Text = "Infinite Ammo ♾️",
        Default = false,
        Tooltip = "Grants infinite ammunition for the equipped weapon",
        Flag = "InfiniteAmmo",
        Callback = function(Value)
            local player = Players.LocalPlayer
            if not player.Character then
                Library:Notify({
                    Title = "Error",
                    Description = "Character not found!",
                    Time = 3
                })
                Flags.InfiniteAmmo = false
                return
            end

            local tool = player.Character:FindFirstChildOfClass("Tool")
            if not tool then
                Library:Notify({
                    Title = "Error",
                    Description = "No gun equipped!",
                    Time = 3
                })
                Flags.InfiniteAmmo = false
                return
            end

            if ApplyInfiniteAmmo(tool, Value) then
                Library:Notify({
                    Title = "Success",
                    Description = Value and "Infinite Ammo Enabled!" or "Infinite Ammo Disabled!",
                    Time = 3
                })
            else
                Library:Notify({
                    Title = "Error",
                    Description = "Failed to access gun settings!",
                    Time = 5
                })
                Flags.InfiniteAmmo = false
            end
        end
    })

    Players.LocalPlayer.CharacterAdded:Connect(function(character)
        if Flags.InfiniteAmmo then
            character.ChildAdded:Connect(function(child)
                if child:IsA("Tool") and Flags.InfiniteAmmo then
                    task.wait(0.1)
                    if ApplyInfiniteAmmo(child, true) then
                        Library:Notify({
                            Title = "Success",
                            Description = "Infinite Ammo applied to new tool!",
                            Time = 3
                        })
                    end
                end
            end)
            character.ChildRemoved:Connect(function(child)
                if child:IsA("Tool") and Flags.InfiniteAmmo then
                    local newTool = character:FindFirstChildOfClass("Tool")
                    if newTool then
                        task.wait(0.1)
                        ApplyInfiniteAmmo(newTool, true)
                    end
                end
            end)
        end
    end)

    BronxSection:Button({
        Text = "Bronx Market 🛒",
        Callback = function()
            local player = Players.LocalPlayer
            local playerGui = player:FindFirstChild("PlayerGui")
            if not playerGui then
                Notify("Bronx Market", "PlayerGui not found", 3)
                return
            end
            local marketGui = playerGui:FindFirstChild("Bronx Market 2")
            if marketGui then
                pcall(function()
                    marketGui.Enabled = not marketGui.Enabled
                    Notify("Bronx Market", marketGui.Enabled and "Market GUI enabled" or "Market GUI disabled", 3)
                end)
            else
                Notify("Bronx Market", "Bronx Market 2 GUI not found", 3)
            end
        end,
        Tooltip = "Toggles the Bronx Market GUI"
    })

    BronxSection:Button({
        Text = "Bronx Clothing 👕",
        Callback = function()
            local success, errorMsg = pcall(function()
                loadstring(game:HttpGet("https://raw.githubusercontent.com/DracoSwagBaby/ScriptsBanger/refs/heads/main/Bronx%20DripShop%20Script"))()
            end)
            if success then
                Notify("Bronx Clothing", "Clothing script loaded successfully", 3)
            else
                Notify("Bronx Clothing", "Failed to load clothing script: " .. tostring(errorMsg), 3)
            end
        end,
        Tooltip = "Loads the Bronx Clothing script"
    })

    local SpectateTarget = nil
    SpectateSection:Input({
        Placeholder = "Enter player username",
        Text = "Set Spectate Target",
        Callback = function(Value)
            SpectateTarget = nil
            for _, player in pairs(Players:GetPlayers()) do
                if player.Name:lower() == Value:lower() then
                    SpectateTarget = player
                    break
                end
            end
            if SpectateTarget then
                Notify("Spectate", "Target set to " .. SpectateTarget.Name, 3)
            else
                Notify("Spectate", "Player not found", 3)
                SpectateTarget = nil
                Flags.SpectateToggle = false
            end
        end
    })

    SpectateSection:Toggle({
        Text = "Spectate",
        Default = false,
        Tooltip = "Spectates the selected player",
        Callback = function(Value)
            if Value and SpectateTarget and SpectateTarget.Character and SpectateTarget.Character:FindFirstChild("Humanoid") then
                local success, err = pcall(function()
                    Workspace.CurrentCamera.CameraSubject = SpectateTarget.Character.Humanoid
                end)
                if success then
                    Notify("Spectate", "Spectating " .. SpectateTarget.Name, 3)
                else
                    Notify("Spectate", "Failed to spectate: " .. tostring(err), 3)
                    Flags.SpectateToggle = false
                end
            else
                if Value then
                    Notify("Spectate", "Cannot spectate: Invalid target or character", 3)
                    Flags.SpectateToggle = false
                end
                if Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                    pcall(function()
                        Workspace.CurrentCamera.CameraSubject = Players.LocalPlayer.Character.Humanoid
                        Notify("Spectate", "Stopped spectating", 3)
                    end)
                end
            end
        end,
        Flag = "SpectateToggle"
    })

    local ESPEnabled = false
    local ESPHighlights = {}
    local InventoryGUIs = {}
    local HealthGUIs = {}

    VisualsSection:Toggle({
        Text = "ESP",
        Default = false,
        Tooltip = "Highlights all players with a red box",
        Callback = function(Value)
            ESPEnabled = Value
            if not Value then
                for _, highlight in pairs(ESPHighlights) do
                    pcall(function() highlight:Destroy() end)
                end
                ESPHighlights = {}
                for _, gui in pairs(InventoryGUIs) do
                    pcall(function() gui:Destroy() end)
                end
                InventoryGUIs = {}
                for _, gui in pairs(HealthGUIs) do
                    pcall(function() gui:Destroy() end)
                end
                HealthGUIs = {}
            end
        end
    })

    local TracersEnabled = false
    local Tracers = {}

    VisualsSection:Toggle({
        Text = "Tracers",
        Default = false,
        Tooltip = "Draws lines from screen center to players",
        Callback = function(Value)
            TracersEnabled = Value
            if not Value then
                for _, tracer in pairs(Tracers) do
                    pcall(function() tracer:Remove() end)
                end
                Tracers = {}
            end
        end
    })

    VisualsSection:Toggle({
        Text = "Show Inventory",
        Default = false,
        Tooltip = "Displays all players' inventory as tool names",
        Callback = function(Value)
            if not Value then
                for _, gui in pairs(InventoryGUIs) do
                    pcall(function() gui:Destroy() end)
                end
                InventoryGUIs = {}
            end
        end,
        Flag = "ShowInventory"
    })

    VisualsSection:Toggle({
        Text = "Show Health",
        Default = false,
        Tooltip = "Shows health bars above players",
        Callback = function(Value)
            if not Value then
                for _, gui in pairs(HealthGUIs) do
                    pcall(function() gui:Destroy() end)
                end
                HealthGUIs = {}
            end
        end,
        Flag = "ShowHealth"
    })

    local RainbowChamsEnabled = false
    local RainbowConnection = nil

    VisualsSection:Toggle({
        Text = "Rainbow Chams",
        Default = false,
        Tooltip = "Applies rainbow effect to player chams",
        Callback = function(Value)
            RainbowChamsEnabled = Value
            if Value then
                RainbowConnection = RunService.RenderStepped:Connect(function()
                    if not RainbowChamsEnabled then
                        RainbowConnection:Disconnect()
                        return
                    end
                    local hue = tick() % 5 / 5
                    local color = Color3.fromHSV(hue, 1, 1)
                    for _, highlight in pairs(ESPHighlights) do
                        pcall(function() highlight.FillColor = color end)
                    end
                end)
            else
                if RainbowConnection then
                    RainbowConnection:Disconnect()
                end
                for _, highlight in pairs(ESPHighlights) do
                    pcall(function() highlight.FillColor = Color3.fromRGB(255, 0, 0) end)
                end
            end
        end
    })

    BankSection:Button({
        Text = "Show Bank Balance 💰",
        Callback = function()
            local player = Players.LocalPlayer
            local stored = player:FindFirstChild("stored")
            if not stored then
                Notify("Bank Balance", "Bank data not found", 3)
                return
            end
            
            local bank = stored:FindFirstChild("Bank")
            if not bank then
                Notify("Bank Balance", "Bank value not found", 3)
                return
            end
            
            Notify("Bank Balance", "Your current balance: $" .. bank.Value, 5)
        end,
        Tooltip = "Displays your current bank balance"
    })

    BankSection:Input({
        Text = "Withdraw Amount 💵",
        Placeholder = "Enter amount",
        Numeric = true,
        ClearOnFocus = true,
        Callback = function(value)
            local amount = tonumber(value)
            if not amount then
                Notify("Withdraw", "Please enter a valid number", 3)
                return
            end
            if amount > 0 and amount <= 90000 then
                local bankAction = ReplicatedStorage:FindFirstChild("BankAction")
                if bankAction then
                    local success, err = pcall(function()
                        bankAction:FireServer("with", amount)
                    end)
                    if success then
                        Notify("Withdraw", "Withdrew $" .. amount, 3)
                    else
                        Notify("Withdraw", "Failed to withdraw: " .. tostring(err), 3)
                    end
                else
                    Notify("Withdraw", "BankAction remote not found", 3)
                end
            else
                Notify("Withdraw", "Invalid amount! Must be between 1 and 90K", 3)
            end
        end,
        Tooltip = "Withdraw money from your bank (max 90K)"
    })

    BankSection:Input({
        Text = "Deposit Amount 💵",
        Placeholder = "Enter amount",
        Numeric = true,
        ClearOnFocus = true,
        Callback = function(value)
            local amount = tonumber(value)
            if not amount then
                Notify("Deposit", "Please enter a valid number", 3)
                return
            end
            if amount > 0 and amount <= 30000 then
                local bankAction = ReplicatedStorage:FindFirstChild("BankAction")
                if bankAction then
                    local success, err = pcall(function()
                        bankAction:FireServer("depo", amount)
                    end)
                    if success then
                        Notify("Deposit", "Deposited $" .. amount, 3)
                    else
                        Notify("Deposit", "Failed to deposit: " .. tostring(err), 3)
                    end
                else
                    Notify("Deposit", "BankAction remote not found", 3)
                end
            else
                Notify("Deposit", "Invalid amount! Must be between 1 and 30K", 3)
            end
        end,
        Tooltip = "Deposit money to your bank (max 30K)"
    })

    BankSection:Toggle({
        Text = "Drop Max ($10k) 💰",
        Default = false,
        Callback = function(value)
            if value then
                local bankProcess = ReplicatedStorage:FindFirstChild("BankProcessRemote")
                if bankProcess then
                    task.spawn(function()
                        while Flags.DropMaxToggle do
                            local success, err = pcall(function()
                                bankProcess:InvokeServer("Drop", "10000")
                            end)
                            if success then
                                Notify("Money Drop", "Dropped $10K", 2)
                            else
                                Notify("Money Drop", "Failed: " .. tostring(err), 3)
                                Flags.DropMaxToggle = false
                                break
                            end
                            task.wait(1)
                        end
                    end)
                else
                    Notify("Money Drop", "BankProcessRemote not found", 3)
                    Flags.DropMaxToggle = false
                end
            end
        end,
        Flag = "DropMaxToggle",
        Tooltip = "Automatically drop $10K repeatedly"
    })

    BankSection:Toggle({
        Text = "Auto Deposit 30K 💰",
        Default = false,
        Callback = function(value)
            if value then
                local bankProcess = ReplicatedStorage:FindFirstChild("BankProcessRemote")
                local bankAction = ReplicatedStorage:FindFirstChild("BankAction")
                if bankProcess and bankAction then
                    task.spawn(function()
                        while Flags.AutoDeposit do
                            local success, err = pcall(function()
                                bankProcess:InvokeServer("Drop", "nan")
                                task.wait(0.1)
                                for _, v in ipairs(Workspace:GetDescendants()) do
                                    if v:IsA("ProximityPrompt") then
                                        v.HoldDuration = 0
                                        v.MaxActivationDistance = 6
                                    end
                                end
                                task.wait(0.1)
                                bankAction:FireServer("depo", "30000")
                            end)
                            if success then
                                Notify("Auto Deposit", "Deposited $30K", 2)
                            else
                                Notify("Auto Deposit", "Failed: " .. tostring(err), 3)
                                Flags.AutoDeposit = false
                                break
                            end
                            task.wait(1)
                        end
                    end)
                else
                    Notify("Auto Deposit", "BankProcessRemote or BankAction not found", 3)
                    Flags.AutoDeposit = false
                end
            end
        end,
        Flag = "AutoDeposit",
        Tooltip = "Automatically deposit 30K repeatedly"
    })

    BankSection:Toggle({
        Text = "Auto Withdraw 90K 💰",
        Default = false,
        Callback = function(value)
            if value then
                local bankAction = ReplicatedStorage:FindFirstChild("BankAction")
                if bankAction then
                    task.spawn(function()
                        while Flags.AutoWithdraw do
                            local success, err = pcall(function()
                                bankAction:FireServer("with", 90000)
                            end)
                            if success then
                                Notify("Auto Withdraw", "Withdrew $90K", 2)
                            else
                                Notify("Auto Withdraw", "Failed: " .. tostring(err), 3)
                                Flags.AutoWithdraw = false
                                break
                            end
                            task.wait(1)
                        end
                    end)
                else
                    Notify("Auto Withdraw", "BankAction remote not found", 3)
                    Flags.AutoWithdraw = false
                end
            end
        end,
        Flag = "AutoWithdraw",
        Tooltip = "Automatically withdraw 90K repeatedly"
    })

    BypassSection:Toggle({
        Text = "Instant Prompts ⚡",
        Default = false,
        Callback = function(Value)
            if Value then
                pcall(function()
                    for _, v in ipairs(Workspace:GetDescendants()) do
                        if v:IsA("ProximityPrompt") then
                            v.HoldDuration = 0
                        end
                    end
                    local connection = Workspace.DescendantAdded:Connect(function(v)
                        if v:IsA("ProximityPrompt") and Flags.InstantPromptsToggle then
                            v.HoldDuration = 0
                        end
                    end)
                end)
                Notify("Instant Prompts", "Instant prompts bypass activated!", 3)
            end
        end,
        Tooltip = "Bypasses delay on proximity prompts",
        Flag = "InstantPromptsToggle"
    })

    BypassSection:Toggle({
        Text = "Anti-Fall 🚫⬇️",
        Default = false,
        Callback = function(Value)
            if Value then
                task.spawn(function()
                    while Flags.AntiFallToggle do
                        local player = Players.LocalPlayer
                        if player and player.Character then
                            local fallDamage = player.Character:FindFirstChild("FallDamageRagdoll")
                            if fallDamage then
                                pcall(function() fallDamage.Disabled = true end)
                            end
                        end
                        task.wait(1)
                    end
                end)
                Notify("Anti-Fall", "Fall damage bypass activated!", 3)
            end
        end,
        Tooltip = "Disables fall damage",
        Flag = "AntiFallToggle"
    })

    BypassSection:Toggle({
        Text = "Anti-Hunger 🚫🍔",
        Default = false,
        Callback = function(Value)
            if Value then
                task.spawn(function()
                    while Flags.AntiHungerToggle do
                        local player = Players.LocalPlayer
                        if player and player:FindFirstChild("PlayerGui") then
                            local hungerGui = player.PlayerGui:FindFirstChild("Hunger")
                            if hungerGui then
                                local hungerScript = hungerGui:FindFirstChild("Frame") and hungerGui.Frame:FindFirstChild("Frame") and 
                                                   hungerGui.Frame.Frame:FindFirstChild("Frame") and hungerGui.Frame.Frame.Frame:FindFirstChild("HungerBarScript")
                                if hungerScript then
                                    pcall(function() hungerScript.Disabled = true end)
                                else
                                    Notify("Anti-Hunger", "HungerBarScript not found", 3)
                                end
                            else
                                Notify("Anti-Hunger", "Hunger GUI not found", 3)
                            end
                        end
                        task.wait(1)
                    end
                end)
                Notify("Anti-Hunger", "Hunger system bypass activated!", 3)
            end
        end,
        Tooltip = "Disables hunger system",
        Flag = "AntiHungerToggle"
    })

    BypassSection:Toggle({
        Text = "Anti-Sleep 🚫😴",
        Default = false,
        Callback = function(Value)
            if Value then
                task.spawn(function()
                    while Flags.AntiSleepToggle do
                        local player = Players.LocalPlayer
                        if player and player:FindFirstChild("PlayerGui") then
                            local sleepGui = player.PlayerGui:FindFirstChild("SleepGui")
                            if sleepGui then
                                local sleepScript = sleepGui:FindFirstChild("Frame") and sleepGui.Frame:FindFirstChild("sleep") and 
                                                  sleepGui.Frame.sleep:FindFirstChild("SleepBar") and sleepGui.Frame.sleep.SleepBar:FindFirstChild("sleepScript")
                                if sleepScript then
                                    pcall(function() sleepScript.Disabled = true end)
                                else
                                    Notify("Anti-Sleep", "sleepScript not found", 3)
                                end
                            else
                                Notify("Anti-Sleep", "SleepGui not found", 3)
                            end
                        end
                        task.wait(1)
                    end
                end)
                Notify("Anti-Sleep", "Sleep system bypass activated!", 3)
            end
        end,
        Tooltip = "Disables sleep system",
        Flag = "AntiSleepToggle"
    })

    BypassSection:Toggle({
        Text = "Anti-Stamina 🚫🏃",
        Default = false,
        Callback = function(Value)
            if Value then
                task.spawn(function()
                    while Flags.AntiStaminaToggle do
                        local player = Players.LocalPlayer
                        if player and player:FindFirstChild("PlayerGui") then
                            local staminaScript = player.PlayerGui:FindFirstChild("Run") and player.PlayerGui.Run:FindFirstChild("Frame") and 
                                               player.PlayerGui.Run.Frame:FindFirstChild("Frame") and player.PlayerGui.Run.Frame.Frame:FindFirstChild("Frame") and 
                                               player.PlayerGui.Run.Frame.Frame.Frame:FindFirstChild("StaminaBarScript")
                            if staminaScript then
                                pcall(function() staminaScript.Disabled = true end)
                            else
                                Notify("Anti-Stamina", "StaminaBarScript not found", 3)
                            end
                        end
                        task.wait(1)
                    end
                end)
                Notify("Anti-Stamina", "Stamina system bypass activated!", 3)
            end
        end,
        Tooltip = "Disables stamina system",
        Flag = "AntiStaminaToggle"
    })

    BypassSection:Toggle({
        Text = "Anti-CameraShake 🚫📷",
        Default = false,
        Callback = function(Value)
            if Value then
                task.spawn(function()
                    while Flags.AntiCameraShakeToggle do
                        local player = Players.LocalPlayer
                        if player and player.Character then
                            local cameraBobbing = player.Character:FindFirstChild("CameraBobbing")
                            if cameraBobbing then
                                pcall(function() cameraBobbing:Destroy() end)
                            end
                        end
                        task.wait(1)
                    end
                end)
                Notify("Anti-CameraShake", "Camera shake bypass activated!", 3)
            end
        end,
        Tooltip = "Disables camera shake",
        Flag = "AntiCameraShakeToggle"
    })

    BypassSection:Toggle({
        Text = "Anti-RentPay 🚫💵",
        Default = false,
        Callback = function(Value)
            if Value then
                local player = Players.LocalPlayer
                local rentGui = player:FindFirstChild("PlayerGui") and player.PlayerGui:FindFirstChild("RentGui")
                if rentGui then
                    local rentScript = rentGui:FindFirstChild("LocalScript")
                    if rentScript then
                        pcall(function()
                            rentScript.Disabled = true
                            rentScript:Destroy()
                        end)
                    else
                        Notify("Anti-RentPay", "Rent script not found", 3)
                    end
                else
                    Notify("Anti-RentPay", "RentGui not found", 3)
                end
                Notify("Anti-RentPay", "Rent payment bypass activated!", 3)
            end
        end,
        Tooltip = "Disables rent payment",
        Flag = "AntiRentPayToggle"
    })

    BypassSection:Toggle({
        Text = "Anti-Knockback 🚫👊",
        Default = false,
        Callback = function(Value)
            if Value then
                local player = Players.LocalPlayer
                if player.Character then
                    pcall(function()
                        for _, v in ipairs(player.Character:GetDescendants()) do
                            if (v:IsA("BodyVelocity") or v:IsA("LinearVelocity") or v:IsA("VectorForce")) then
                                v:Destroy()
                            end
                        end
                        local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
                        if rootPart then
                            rootPart.ChildAdded:Connect(function(v)
                                if Flags.AntiKnockbackToggle and (v:IsA("BodyVelocity") or v:IsA("LinearVelocity") or v:IsA("VectorForce")) then
                                    pcall(function() v:Destroy() end)
                                end
                            end)
                        end
                    end)
                end
                if ReplicatedStorage:FindFirstChild("AE") then
                    pcall(function() ReplicatedStorage.AE:Destroy() end)
                end
                Notify("Anti-Knockback", "Knockback bypass activated!", 3)
            end
        end,
        Tooltip = "Disables knockback effects",
        Flag = "AntiKnockbackToggle"
    })

    BypassSection:Toggle({
        Text = "Anti-JumpCooldown 🚫🦘",
        Default = false,
        Callback = function(Value)
            if Value then
                task.spawn(function()
                    while Flags.AntiJumpCooldownToggle do
                        local player = Players.LocalPlayer
                        local playerGui = player:FindFirstChild("PlayerGui")
                        if playerGui then
                            local jumpDebounce = playerGui:FindFirstChild("JumpDebounce")
                            if jumpDebounce then
                                pcall(function() jumpDebounce:Destroy() end)
                            end
                        else
                            Notify("Anti-JumpCooldown", "PlayerGui not found", 3)
                        end
                        task.wait(1)
                    end
                end)
                Notify("Anti-JumpCooldown", "Jump cooldown bypass activated!", 3)
            end
        end,
        Tooltip = "Disables jump cooldown",
        Flag = "AntiJumpCooldownToggle"
    })

    RunService.RenderStepped:Connect(function()
        if ESPEnabled then
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    if not ESPHighlights[player] then
                        local success, highlight = pcall(function()
                            local h = Instance.new("Highlight")
                            h.Parent = player.Character
                            h.FillColor = Color3.fromRGB(255, 0, 0)
                            h.OutlineColor = Color3.fromRGB(255, 255, 255)
                            h.FillTransparency = 0.5
                            h.OutlineTransparency = 0
                            return h
                        end)
                        if success then
                            ESPHighlights[player] = highlight
                        end
                    end
                end
            end
            for player, highlight in pairs(ESPHighlights) do
                if not player.Parent or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                    pcall(function() highlight:Destroy() end)
                    ESPHighlights[player] = nil
                end
            end
        end

        if TracersEnabled then
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    if not Tracers[player] then
                        local success, line = pcall(Drawing.new, "Line")
                        if success then
                            line.Color = Color3.fromRGB(255, 0, 0)
                            line.Thickness = 1
                            line.Transparency = 1
                            Tracers[player] = line
                        end
                    end
                    local tracer = Tracers[player]
                    local root = player.Character.HumanoidRootPart
                    if tracer and root then
                        local success, screenPos, onScreen = pcall(function()
                            return Workspace.CurrentCamera:WorldToViewportPoint(root.Position)
                        end)
                        if success and onScreen then
                            pcall(function()
                                tracer.Visible = true
                                tracer.From = Vector2.new(Workspace.CurrentCamera.ViewportSize.X / 2, Workspace.CurrentCamera.ViewportSize.Y / 2)
                                tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                            end)
                        else
                            pcall(function() tracer.Visible = false end)
                        end
                    end
                end
            end
            for player, tracer in pairs(Tracers) do
                if not player.Parent or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                    pcall(function() tracer:Remove() end)
                    Tracers[player] = nil
                end
            end
        end

        if Flags.ShowInventory then
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    if not InventoryGUIs[player] then
                        local success, billboard = pcall(function()
                            local b = Instance.new("BillboardGui")
                            b.Parent = player.Character.HumanoidRootPart
                            b.Size = UDim2.new(0, 200, 0, 100)
                            b.StudsOffset = Vector3.new(0, 3, 0)
                            b.AlwaysOnTop = true
                            local textLabel = Instance.new("TextLabel")
                            textLabel.Parent = b
                            textLabel.Size = UDim2.new(1, 0, 1, 0)
                            textLabel.BackgroundTransparency = 1
                            textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                            textLabel.TextScaled = true
                            return b
                        end)
                        if success then
                            InventoryGUIs[player] = billboard
                        end
                    end
                    local billboard = InventoryGUIs[player]
                    if billboard then
                        local inventoryText = "Inventory:\n"
                        pcall(function()
                            for _, tool in pairs(player.Backpack:GetChildren()) do
                                if tool:IsA("Tool") then
                                    inventoryText = inventoryText .. tool.Name .. "\n"
                                end
                            end
                            if player.Character then
                                for _, tool in pairs(player.Character:GetChildren()) do
                                    if tool:IsA("Tool") then
                                        inventoryText = inventoryText .. tool.Name .. "\n"
                                    end
                                end
                            end
                            billboard.TextLabel.Text = inventoryText
                        end)
                    end
                end
            end
            for player, gui in pairs(InventoryGUIs) do
                if not player.Parent or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                    pcall(function() gui:Destroy() end)
                    InventoryGUIs[player] = nil
                end
            end
        end

        if Flags.ShowHealth then
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer and player.Character then
                    local humanoid = player.Character:FindFirstChild("Humanoid")
                    local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
                    if humanoid and rootPart then
                        if not HealthGUIs[player] then
                            local success, billboard = pcall(function()
                                local b = Instance.new("BillboardGui")
                                b.Parent = rootPart
                                b.Size = UDim2.new(0, 100, 0, 20)
                                b.StudsOffset = Vector3.new(0, 2, 0)
                                b.AlwaysOnTop = true
                                local frame = Instance.new("Frame")
                                frame.Parent = b
                                frame.Size = UDim2.new(1, 0, 1, 0)
                                frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                                local healthBar = Instance.new("Frame")
                                healthBar.Name = "HealthBar"
                                healthBar.Parent = frame
                                healthBar.Size = UDim2.new(humanoid.Health / humanoid.MaxHealth, 0, 1, 0)
                                healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                                return b
                            end)
                            if success then
                                HealthGUIs[player] = billboard
                                humanoid.HealthChanged:Connect(function(health)
                                    if HealthGUIs[player] and HealthGUIs[player].Frame and HealthGUIs[player].Frame.HealthBar then
                                        pcall(function()
                                            HealthGUIs[player].Frame.HealthBar.Size = UDim2.new(health / humanoid.MaxHealth, 0, 1, 0)
                                        end)
                                    end
                                end)
                            end
                        else
                            if HealthGUIs[player].Frame and HealthGUIs[player].Frame.HealthBar then
                                pcall(function()
                                    HealthGUIs[player].Frame.HealthBar.Size = UDim2.new(humanoid.Health / humanoid.MaxHealth, 0, 1, 0)
                                end)
                            end
                        end
                    end
                end
            end
            for player, gui in pairs(HealthGUIs) do
                if not player.Parent or not player.Character or not player.Character:FindFirstChild("Humanoid") or not player.Character:FindFirstChild("HumanoidRootPart") then
                    pcall(function() gui:Destroy() end)
                    HealthGUIs[player] = nil
                end
            end
        end
    end)

    Players.PlayerAdded:Connect(function(player)
        if player ~= Players.LocalPlayer and Flags.ShowHealth then
            player.CharacterAdded:Connect(function(character)
                local humanoid = character:FindFirstChild("Humanoid")
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if humanoid and rootPart then
                    local success, billboard = pcall(function()
                        local b = Instance.new("BillboardGui")
                        b.Parent = rootPart
                        b.Size = UDim2.new(0, 100, 0, 20)
                        b.StudsOffset = Vector3.new(0, 2, 0)
                        b.AlwaysOnTop = true
                        local frame = Instance.new("Frame")
                        frame.Parent = b
                        frame.Size = UDim2.new(1, 0, 1, 0)
                        frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                        local healthBar = Instance.new("Frame")
                        healthBar.Name = "HealthBar"
                        healthBar.Parent = frame
                        healthBar.Size = UDim2.new(humanoid.Health / humanoid.MaxHealth, 0, 1, 0)
                        healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                        return b
                    end)
                    if success then
                        HealthGUIs[player] = billboard
                        humanoid.HealthChanged:Connect(function(health)
                            if HealthGUIs[player] and HealthGUIs[player].Frame and HealthGUIs[player].Frame.HealthBar then
                                pcall(function()
                                    HealthGUIs[player].Frame.HealthBar.Size = UDim2.new(health / humanoid.MaxHealth, 0, 1, 0)
                                end)
                            end
                        end)
                    else
                        Notify("Show Health", "Failed to initialize health bar for " .. player.Name, 3)
                    end
                else
                    Notify("Show Health", "Failed to find Humanoid or RootPart for " .. player.Name, 3)
                end
            end)
        end
    end)

    Players.PlayerRemoving:Connect(function(player)
        if ESPHighlights[player] then
            pcall(function() ESPHighlights[player]:Destroy() end)
            ESPHighlights[player] = nil
        end
        if Tracers[player] then
            pcall(function() Tracers[player]:Remove() end)
            Tracers[player] = nil
        end
        if InventoryGUIs[player] then
            pcall(function() InventoryGUIs[player]:Destroy() end)
            InventoryGUIs[player] = nil
        end
        if HealthGUIs[player] then
            pcall(function() HealthGUIs[player]:Destroy() end)
            HealthGUIs[player] = nil
        end
    end)

    MainTab:Select()
    Notify("Vexto Premium", "Script initialized successfully!", 5)
    -- Main script ends here
end

-- Check key function
checkButton.MouseButton1Click:Connect(function()
    local enteredKey = keyInput.Text
    if enteredKey == validKey then
        if not keyStartTime or (os.time() - keyStartTime) > keyExpiration then
            keyStartTime = os.time()
            currentKey = enteredKey
            timerLabel.Text = "Key accepted! Loading script..."
            print("Key is valid! Starting main script.")
            runMainScript()
        else
            timerLabel.Text = "Key already in use! Time left: " .. formatTime(keyExpiration - (os.time() - keyStartTime))
            print("Key is already in use and still valid!")
        end
    else
        timerLabel.Text = "Invalid key"
        print("Invalid key!")
    end
end)

-- Get key function
getKeyButton.MouseButton1Click:Connect(function()
    if setclipboard then
        setclipboard(keyLink)
        timerLabel.Text = "Link copied!"
        print("Link copied to clipboard: " .. keyLink)
        wait(2)
        updateTimer()
    else
        timerLabel.Text = "Clipboard not supported"
        print("Clipboard functionality not supported in this environment.")
    end
end)

-- Timer update loop
spawn(function()
    while true do
        updateTimer()
        wait(1)
    end
end)
